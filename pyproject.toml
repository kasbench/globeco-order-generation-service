[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "globeco-order-generation-service"
version = "0.1.0"
description = "Portfolio optimization and order generation microservice for the GlobeCo Suite"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "Noah Krieger", email = "noah@kasbench.org" },
]
maintainers = [
    { name = "Noah Krieger", email = "noah@kasbench.org" },
]
keywords = [
    "portfolio",
    "optimization",
    "finance",
    "microservice",
    "kubernetes",
    "fastapi",
    "mongodb",
    "cvxpy",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Typing :: Typed",
]
requires-python = ">=3.13"
dependencies = [
    # Web Framework
    "fastapi>=0.115.12",
    "uvicorn[standard]>=0.24.0",
    "gunicorn>=23.0.0",
    # Database & ODM
    "motor>=3.0.0",
    "beanie>=1.29",
    "pymongo>=4.6.0",
    # Data Validation & Serialization
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    # Mathematical Optimization
    "cvxpy>=1.6.0",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    # HTTP Client & External Services
    "httpx>=0.25.0",
    "tenacity>=8.2.0",
    # Logging & Monitoring
    "structlog>=23.0.0",
    "prometheus-client>=0.19.0",
    # Utilities
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "prometheus-fastapi-instrumentator>=7.1.0",
    "psutil>=6.0.0",
    "cachetools>=5.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-asyncio>=0.26.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pytest-benchmark>=4.0.0",
    "testcontainers[mongodb]>=3.7.0",

    # Code Quality
    "black>=23.0.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",

    # Development Tools
    "ipython>=8.18.0",
    "rich>=13.7.0",

    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/kasbench/globeco-order-generation-service"
Documentation = "https://github.com/kasbench/globeco-order-generation-service/blob/main/README.md"
Repository = "https://github.com/kasbench/globeco-order-generation-service"
Issues = "https://github.com/kasbench/globeco-order-generation-service/issues"
Changelog = "https://github.com/kasbench/globeco-order-generation-service/blob/main/CHANGELOG.md"

[project.scripts]
order-generation-service = "src.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
target-version = ["py313"]
line-length = 88
skip-string-normalization = true
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py313"
line-length = 88
extend-exclude = [
    ".venv",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    "build",
    "dist",
]


[tool.mypy]
python_version = "3.13"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=95",
]
testpaths = ["src/tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "mathematical: Mathematical validation tests",
    "slow: Slow running tests",
    "external: Tests that require external services",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "src/tests/*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "\\.\\.\\.",
]

[dependency-groups]
dev = [
    "bandit>=1.8.3",
    "safety>=3.2.9",
]
