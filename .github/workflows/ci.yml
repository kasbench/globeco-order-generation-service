name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: kasbench/globeco-order-generation-service
  PYTHON_VERSION: "3.13"

jobs:
  # Code Quality and Security Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV package manager
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Debug UV and Python environment
      run: |
        echo "=== UV Info ==="
        uv --version
        echo "=== Python Info ==="
        uv run python --version
        echo "=== Python Path ==="
        uv run python -c "import sys; print(sys.executable)"
        echo "=== Installed Packages ==="
        uv pip list || echo "uv pip list failed"

    - name: Install testing dependencies explicitly
      run: |
        uv pip install pytest pytest-asyncio pytest-cov pytest-mock pytest-xdist pytest-benchmark
        uv pip install testcontainers[mongodb]
        uv pip install pymongo motor beanie

    - name: Install code quality dependencies explicitly
      run: |
        uv pip install black mypy bandit
        # pre-commit temporarily disabled: uv pip install pre-commit

    - name: Verify installations
      run: |
        echo "=== Pytest Info ==="
        uv run python -c "import pytest; print(f'pytest version: {pytest.__version__}')"
        # echo "=== Pre-commit Info ==="
        # uv run pre-commit --version

    # Pre-commit disabled temporarily due to config file discovery issues in CI
    # - name: Debug pre-commit environment
    #   run: |
    #     echo "=== Current Directory ==="
    #     pwd
    #     echo "=== Pre-commit Config File ==="
    #     ls -la .pre-commit-config.yaml || echo "Pre-commit config file not found"
    #     echo "=== Git Status ==="
    #     git status --porcelain .pre-commit-config.yaml || echo "File not tracked"

    # - name: Install pre-commit hooks
    #   run: |
    #     uv run pre-commit install

    # - name: Run pre-commit hooks
    #   run: |
    #     uv run pre-commit run --all-files

    - name: Security scan with Bandit
      run: |
        uv run python -m bandit -r src/ -f json -o bandit-report.json || true
        uv run python -m bandit -r src/ -f txt

    - name: Upload security scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: bandit-report.json
        retention-days: 30

  # Comprehensive Testing Suite
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    services:
      mongodb:
        image: mongo:8.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: testpassword
        options: >-
          --health-cmd "test -f /proc/1/stat"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install UV package manager
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Install testing dependencies explicitly
      run: |
        uv pip install pytest pytest-asyncio pytest-cov pytest-mock pytest-xdist pytest-benchmark
        uv pip install testcontainers[mongodb]
        uv pip install pymongo motor beanie

    - name: Verify pytest installation
      run: |
        uv run python -c "import pytest; print(f'pytest version: {pytest.__version__}')"

    - name: Wait for MongoDB
      run: |
        uv run python -c "
        import pymongo
        import time
        import sys

        for i in range(60):
            try:
                client = pymongo.MongoClient('mongodb://root:testpassword@localhost:27017/?authSource=admin', serverSelectionTimeoutMS=1000)
                client.admin.command('ping')
                print('MongoDB is ready!')
                sys.exit(0)
            except Exception as e:
                print(f'Waiting for MongoDB... ({i+1}/60)')
                time.sleep(1)

        print('Timeout waiting for MongoDB')
        sys.exit(1)
        "

    - name: Run unit tests
      env:
        MONGODB_URL: mongodb://root:testpassword@localhost:27017/test_db?authSource=admin
      run: |
        uv run python -m pytest src/tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing --cov-fail-under=10

    - name: Run integration tests
      env:
        MONGODB_URL: mongodb://root:testpassword@localhost:27017/test_db?authSource=admin
      run: |
        uv run python -m pytest src/tests/integration/ -v --tb=short

    - name: Upload coverage reports
      if: matrix.python-version == '3.13'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          coverage.xml
          .coverage
        retention-days: 30

  # Docker Build and Security Scan
  docker-build:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [quality-checks, test-suite]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image (test)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: production

    - name: Build and push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: production

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Generate SBOM
      if: github.event_name != 'pull_request'
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.IMAGE_NAME }}:latest
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json
        retention-days: 90

  # Performance and Load Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV package manager
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Start test environment
      run: |
        docker compose up -d
        sleep 30

    - name: Wait for service to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/health/ready; do sleep 2; done'

    - name: Run performance tests
      run: |
        uv run pytest src/tests/performance/ -v --tb=short || true

    - name: Collect container logs
      if: always()
      run: |
        docker compose logs > docker-logs.txt

    - name: Upload performance test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: |
          docker-logs.txt
        retention-days: 30

    - name: Stop test environment
      if: always()
      run: |
        docker compose down -v

  # Release Management
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [quality-checks, test-suite, docker-build, performance-tests]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes in this release
          ${{ steps.changelog.outputs.CHANGELOG }}

          ## Docker Images
          - `${{ env.IMAGE_NAME }}:${{ github.ref_name }}`
          - `${{ env.IMAGE_NAME }}:latest`

          ## Deployment
          ```bash
          # Update Kubernetes deployment
          kubectl set image deployment/globeco-order-generation-service \
            order-generation-service=${{ env.IMAGE_NAME }}:${{ github.ref_name }} \
            -n globeco
          ```
        draft: false
        prerelease: false

  # Deployment Validation
  deployment-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Validate Kubernetes manifests
      run: |
        # Validate all Kubernetes manifests
        for file in deployments/*.yaml; do
          echo "Validating $file..."
          kubectl apply --dry-run=client -f "$file" || echo "Validation failed for $file"
        done

    - name: Validate with kustomize
      run: |
        # Install kustomize
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

        # Validate kustomize build
        cd deployments
        kustomize build . | kubectl apply --dry-run=client -f -

    - name: Security policy validation
      run: |
        # Validate security policies
        echo "Validating security contexts..."
        grep -r "runAsNonRoot: true" deployments/ || echo "Warning: Non-root execution not enforced"
        grep -r "readOnlyRootFilesystem: true" deployments/ || echo "Warning: Read-only filesystem not enforced"

    - name: Resource validation
      run: |
        # Validate resource limits
        echo "Validating resource limits..."
        grep -r "limits:" deployments/ || echo "Warning: Resource limits not set"
        grep -r "requests:" deployments/ || echo "Warning: Resource requests not set"

  # Notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [quality-checks, test-suite, docker-build, performance-tests, deployment-validation]
    if: always() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))

    steps:
    - name: Determine status
      id: status
      run: |
        if [[ "${{ needs.quality-checks.result }}" == "success" && \
              "${{ needs.test-suite.result }}" == "success" && \
              "${{ needs.docker-build.result }}" == "success" && \
              ("${{ needs.performance-tests.result }}" == "success" || "${{ needs.performance-tests.result }}" == "skipped") && \
              ("${{ needs.deployment-validation.result }}" == "success" || "${{ needs.deployment-validation.result }}" == "skipped") ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ CI/CD Pipeline completed successfully" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ CI/CD Pipeline failed" >> $GITHUB_OUTPUT
        fi

    - name: Log pipeline status
      run: |
        echo "Pipeline Status: ${{ steps.status.outputs.status }}"
        echo "Message: ${{ steps.status.outputs.message }}"
        echo "Repository: ${{ github.repository }}"
        echo "Branch/Tag: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        echo "Docker Image: ${{ env.IMAGE_NAME }}:latest"
