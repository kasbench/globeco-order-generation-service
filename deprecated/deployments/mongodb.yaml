apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: globeco-order-generation-service-mongodb
  namespace: globeco
  labels:
    app: globeco-order-generation-service-mongodb
    component: database
    version: v1
    tier: data
spec:
  serviceName: globeco-order-generation-service-mongodb-headless
  replicas: 1
  selector:
    matchLabels:
      app: globeco-order-generation-service-mongodb
  template:
    metadata:
      labels:
        app: globeco-order-generation-service-mongodb
        component: database
        version: v1
        tier: data
    spec:
      securityContext:
        runAsNonRoot: false
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: mongodb
        image: mongo:8.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: mongodb
          containerPort: 27017
          protocol: TCP
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "root"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: globeco-order-generation-service-mongodb-credentials
              key: root-password
        - name: MONGO_INITDB_DATABASE
          value: "globeco_production"
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 12
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: false
          capabilities:
            drop:
            - ALL
            add:
            - SETGID
            - SETUID
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-config
          mountPath: /data/configdb
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
      volumes:
      - name: init-script
        configMap:
          name: mongodb-init-script
          defaultMode: 0755
      - name: mongodb-config
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
      labels:
        app: globeco-order-generation-service-mongodb
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
      storageClassName: standard
---
apiVersion: v1
kind: Service
metadata:
  name: globeco-order-generation-service-mongodb
  namespace: globeco
  labels:
    app: globeco-order-generation-service-mongodb
    component: database
    version: v1
    tier: data
spec:
  type: ClusterIP
  ports:
  - name: mongodb
    port: 27017
    targetPort: mongodb
    protocol: TCP
  selector:
    app: globeco-order-generation-service-mongodb
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: globeco-order-generation-service-mongodb-headless
  namespace: globeco
  labels:
    app: globeco-order-generation-service-mongodb
    component: database
    version: v1
    tier: data
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: mongodb
    port: 27017
    targetPort: mongodb
    protocol: TCP
  selector:
    app: globeco-order-generation-service-mongodb
  sessionAffinity: None
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init-script
  namespace: globeco
  labels:
    app: globeco-order-generation-service-mongodb
    component: database
    version: v1
    tier: data
data:
  init-mongo.js: |
    // MongoDB initialization script for Order Generation Service

    // Create the application database
    db = db.getSiblingDB('globeco_production');

    // Create application user with read/write permissions
    db.createUser({
      user: 'ordgen_user',
      pwd: 'ordgen_secure_password_123',
      roles: [
        {
          role: 'readWrite',
          db: 'globeco_production'
        }
      ]
    });

    // Create the models collection with validation
    db.createCollection('models', {
      validator: {
        $jsonSchema: {
          bsonType: 'object',
          required: ['name', 'positions', 'portfolios', 'version'],
          properties: {
            name: {
              bsonType: 'string',
              description: 'Model name must be a string and is required'
            },
            positions: {
              bsonType: 'array',
              description: 'Positions must be an array and is required',
              items: {
                bsonType: 'object',
                required: ['securityId', 'target', 'highDrift', 'lowDrift'],
                properties: {
                  securityId: {
                    bsonType: 'string',
                    pattern: '^[a-zA-Z0-9]{24}$',
                    description: 'Security ID must be a 24-character alphanumeric string'
                  },
                  target: {
                    bsonType: 'decimal',
                    minimum: 0,
                    maximum: 0.95,
                    description: 'Target must be between 0 and 0.95'
                  },
                  highDrift: {
                    bsonType: 'decimal',
                    minimum: 0,
                    maximum: 1,
                    description: 'High drift must be between 0 and 1'
                  },
                  lowDrift: {
                    bsonType: 'decimal',
                    minimum: 0,
                    maximum: 1,
                    description: 'Low drift must be between 0 and 1'
                  }
                }
              }
            },
            portfolios: {
              bsonType: 'array',
              description: 'Portfolios must be an array and is required',
              items: {
                bsonType: 'string',
                pattern: '^[a-fA-F0-9]{24}$',
                description: 'Portfolio ID must be a 24-character hexadecimal string'
              }
            },
            version: {
              bsonType: 'int',
              minimum: 1,
              description: 'Version must be a positive integer'
            },
            lastRebalanceDate: {
              bsonType: 'date',
              description: 'Last rebalance date must be a valid date'
            }
          }
        }
      }
    });

    // Create indexes for optimal query performance
    db.models.createIndex({ 'name': 1 }, { unique: true });
    db.models.createIndex({ 'portfolios': 1 });
    db.models.createIndex({ 'positions.securityId': 1 }, { sparse: true });
    db.models.createIndex({ 'lastRebalanceDate': 1 });
    db.models.createIndex({ 'version': 1 });

    // Create a compound index for efficient portfolio-based queries
    db.models.createIndex({ 'portfolios': 1, 'lastRebalanceDate': -1 });

    print('MongoDB initialization completed for Order Generation Service');
